class Solution {
    public int maxScore(String s) {
        int maxScore = 0;

        int countZerosLeft = 0;
        int countOnesRight = 0;

        // Count the initial number of ones on the right side
        for (char c : s.toCharArray()) {
            if (c == '1') {
                countOnesRight++;
            }
        }

        // Iterate through the string and calculate the score for each split
        for (int i = 0; i < s.length() - 1; i++) {
            // Update counts based on the current character
            if (s.charAt(i) == '0') {
                countZerosLeft++;
            } else {
                countOnesRight--;
            }

            // Calculate the current score and update maxScore if needed
            int currentScore = countZerosLeft + countOnesRight;
            maxScore = Math.max(maxScore, currentScore);
        }

        return maxScore;
    }
}
